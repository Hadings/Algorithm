/*
이항계수2
11051번


메모이제이션과 다이나믹 프로그래밍의 특징은 다음과 같다.

1) 메모이제이션이나 다이나믹 프로그래밍 둘다 순환식을 계산하는 방법이라고 할 수 있다.
2) 모두 동적 계획법의 일종이라고 보기도 한다.
3) 메모이제이션은 Top down 방식이고 실제 필요한 sub problem을 푼다,
4) 다이나믹 프로그래밍은 Bottom up 방식이며 재귀에 수반되는 overhead가 없다.

*/

#include<stdio.h>

int binom[1000][1000];

int binomial01(int n, int k) {
	if (n == k || k == 0) return 1;

	else
		return binomial01(n - 1, k) + binomial01(n - 1, k - 1);
} // 재귀를 사용한 이항계수

int binomial02(int n, int k) {
	if (n == k || k == 0) return 1;

	else if (binom[n][k] > -1) // 배열 binom이 -1로 초기화되어 있다고 가정
		return binom[n][k];
	else {
		binom[n][k] = binomial02(n-1,k)+ binomial02(n - 1, k - 1);
		return binom[n][k];
	}
} // 재귀 계산에서도 같은 값에 대해 중복되는 코드가 많아지므로 메모이제이션 기법을 사용하면 훨씬 빠르고 강력한 계산이 가능

int binomial03(int n, int k) {
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= k && j <=i; j++) {
			if (n == k || k == 0)
				binom[i][j] = 1;
			else
				binom[i][j] = binom[i - 1][j - 1] + binom[i - 1][j];
		}
	}
	return binom[n][k];
} //Bottom up 방식으로 계산된 결과 (기본적인 값에서 부터 출발한다는 뜻 1 ~ n 까지)


int main() {
	int n, k;
	scanf("%d %d", &n, &k);
	
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= k; j++) {
			binom[i][j] = -1;
		}
	}
	
	printf("%d\n", binomial02(n, k) % 10007);

	return 0;
}
