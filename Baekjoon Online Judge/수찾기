#include<stdio.h>

int arr1[100001], arr2[100001];
int i,j;
int n,m;
void quickSort(int numbers[], int array_size);
void q_sort(int numbers[], int left, int right);



void Bubble_sort(int ar[], int len) {
	int temp;
	for (i = 0; i < len; i++) {
		for (j = 0; j < len-1; j++) {
			if (ar[j] > ar[j + 1]) {
				temp = ar[j];
				ar[j] = ar[j + 1];
				ar[j + 1] = temp;
			}
		}
	}
}

int BSearch(int ar[], int len, int target) {
	int first = 0;
	int last = len - 1;
	int mid = 0;

	// first와 last가 같은 경우까지 반복하는 이유
	// while(first < last)이면 마지막 하나가 남았을때
	// 검사하지 않고 종료되기 때문이다.
	while (first <= last) {
		mid = (first + last) / 2;
		if (ar[mid] == target) {
			return 1;
		}
		else {
			if (ar[mid] > target)
				last = mid - 1;
			else
				first = mid + 1;
		}
	}
	return 0;
}


int main(int arc, char** arg) {
	int idx;

	scanf("%d",&n);

	for (i = 0; i < n; i++) {
		scanf("%d", &arr1[i]);
	}

	scanf("%d", &m);

	for (i = 0; i < m; i++) {
		scanf("%d", &arr2[i]);
	}
	quickSort(arr1, sizeof(arr1) / sizeof(int));
	//Bubble_sort(arr1,sizeof(arr1)/ sizeof(int));
	for (i = 0; i < m; i++) {
		idx = BSearch(arr1, sizeof(arr1) / sizeof(int), arr2[i]);
		printf("%d\n", idx);
	}
	return 0;
}




void quickSort(int numbers[], int array_size)
{
	q_sort(numbers, 0, array_size - 1);
}

void q_sort(int numbers[], int left, int right)
{
	int pivot, l_hold, r_hold;
	l_hold = left;
	r_hold = right;
	pivot = numbers[left];  // 0번째 원소를 피봇으로 선택
	while (left < right)
	{
		// 값이 선택한 피봇과 같거나 크다면, 이동할 필요가 없다
		while ((numbers[right] >= pivot) && (left < right))
			right--;

		// 그렇지 않고 값이 피봇보다 작다면,
		// 피봇의 위치에 현재 값을 넣는다.
		if (left != right)
		{
			numbers[left] = numbers[right];
		}
		// 왼쪽부터 현재 위치까지 값을 읽어들이면서
		// 피봇보다 큰 값이 있다면, 값을 이동한다.
		while ((numbers[left] <= pivot) && (left < right))
			left++;

		if (left != right)
		{
			numbers[right] = numbers[left];
			right--;
		}
	}

	// 모든 스캔이 끝났다면, 피봇값을 현재 위치에 입력한다.
	// 이제 피봇을 기준으로 왼쪽에는 피봇보다 작거나 같은 값만 남았다.
	numbers[left] = pivot;
	pivot = left;
	left = l_hold;
	right = r_hold;

	// 재귀호출을 수행한다.
	if (left < pivot)
		q_sort(numbers, left, pivot - 1);
	if (right > pivot)
		q_sort(numbers, pivot + 1, right);
}
